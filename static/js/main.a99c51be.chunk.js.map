{"version":3,"sources":["Images/step_1.png","Images/step_2.png","Images/step_3.png","Images/step_4.png","Images/close.svg","Components/Square/Square.js","Components/lib/helpers.js","Components/Counter/Counter.js","Components/Intro/Intro.js","Components/ButtonOfLevel/ButtonOfLevel.js","Components/StartLayer/StartLayer.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","firstSquare","row","col","partOfRoad","handleClick","clickedRoad","missArray","index","squareValue","squareClass","classNames","length","includes","filter","el","className","onClick","e","setDuration","myTime","amountOfSquares","time","deleteLastArrayElement","array","slice","isBusySquare","roadArray","i","Counter","counterTime","console","log","useState","counter","setCounter","useEffect","timer","setInterval","clearInterval","Intro","handleToggleIntro","src","step_1","alt","step_2","step_3","step_4","close","ButtonOfLevel","nameLevel","amountOfLives","StartLayer","setDifficultyLevel","Game","props","drawFirstSquare","a","board","state","randomFiled","Math","round","random","setState","setRoad","isBusyArray","setSingleSquare","road","handleStart","isStartButtonDisabled","isWin","isChangeLevelButtonDisabled","unlockSquares","updateRoad","hideRoad","setTimeBetweenDraw","tempArray","duration","setTimeout","push","checkRoad","currentSquare","preventDefault","areSquaresLocked","lastClickedIndex","isDeletingMiss","currentIndex","prevState","topBoxInformation","winRound","deleteInformation","miss","gameOver","deleteMiss","isStartLayerVisible","isCounterVisible","cleanStateOfGame","handleChangeLevel","level","buttonCaption","isIntroVisible","isGameOver","isWinGame","dimension","busyArray","bind","this","ifUserWasOnSite","createBoard","localStorage","getItem","setItem","list","direction","substr","setBusyState","map","roadSquare","square","setSquareDuration","winGame","j","key","informationClass","icon","faHeart","renderBoard","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a99c51be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/step_1.98d4a8f4.png\";","module.exports = __webpack_public_path__ + \"static/media/step_2.c9a01342.png\";","module.exports = __webpack_public_path__ + \"static/media/step_3.b351b6c7.png\";","module.exports = __webpack_public_path__ + \"static/media/step_4.1364df59.png\";","module.exports = __webpack_public_path__ + \"static/media/close.679c3916.svg\";","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Square = ({ firstSquare, row, col, partOfRoad, handleClick, clickedRoad, missArray, index }) => {\r\n  const squareValue = `${row}${col}`; \r\n  const squareClass = classNames({\r\n    'square': true,\r\n    'startSquare': firstSquare === squareValue || partOfRoad[partOfRoad.length-1] === squareValue,\r\n    'drawRoad': partOfRoad.includes(squareValue) && partOfRoad[partOfRoad.length-1] !== squareValue,\r\n    'hitSquare': clickedRoad.filter(el => el === squareValue)[0],\r\n    'missSquare': missArray.filter(el => el === squareValue)[0]\r\n  })\r\n  return (\r\n    <div className={squareClass} onClick={(e) => handleClick(squareValue, index, e)}></div >\r\n  );\r\n}\r\n\r\nexport default Square;","\r\nconst setDuration = ({ amountOfSquares, time }, myTime) => {\r\n    return (amountOfSquares * time) + myTime;\r\n}\r\n\r\nconst getDirection = () => {\r\n    return Math.round(Math.random() * 3);\r\n}\r\n\r\nconst deleteLastArrayElement = (array) => {\r\n    return array.slice(0, array.length);\r\n}\r\n\r\nconst setSquareDuration = (road, col, time) => {\r\n    const durationArray = road.map((square, index) => (square === col ? (index + 1) * time : null));\r\n    const durationElement = durationArray.filter(square => typeof square === \"number\")[0];\r\n    return durationElement;\r\n}\r\n\r\nconst isBusySquare = (firstSquare, roadArray, row, col) => {\r\n    for (let i = 0; i < roadArray.length; i++) {\r\n        if (roadArray[i] === `${row}${col}` || firstSquare === `${row}${col}`) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nconst getRandom = (board) => {\r\n    return board[Math.round(Math.random() * 9)][\r\n        Math.round(Math.random() * 9)\r\n    ];\r\n}\r\n\r\nexport { setDuration, getDirection, deleteLastArrayElement, setSquareDuration, isBusySquare, getRandom };","import React, { useState, useEffect } from \"react\"\r\n\r\nconst Counter = ({ counterTime }) => {\r\n    console.log(counterTime);\r\n\r\n    const [counter, setCounter] = useState(counterTime)\r\n    useEffect(() => {\r\n        const timer =\r\n            counter > 0 && setInterval(() => setCounter(counter - 1), 1000)\r\n        return () => clearInterval(timer)\r\n    }, [counter])\r\n    return (\r\n        <span className=\"game__parameter game__parameter--counter\" >{counter}s</span>\r\n    )\r\n}\r\n\r\nexport default Counter;","import React from 'react'\r\nimport step_1 from \"../../Images/step_1.png\"\r\nimport step_2 from \"../../Images/step_2.png\"\r\nimport step_3 from \"../../Images/step_3.png\"\r\nimport step_4 from \"../../Images/step_4.png\"\r\nimport close from \"../../Images/close.svg\"\r\n\r\n\r\nexport default function Intro({ handleToggleIntro }) {\r\n    return (\r\n        <div className=\"introduction\">\r\n            <div className=\"introduction__wrapper scroll\">\r\n                <header className=\"introduction__header\">\r\n                    <h3 className=\"introduction__title\">Hello in RoadGame</h3>\r\n                    <span className=\"introduction__propose\">Don't you know what's going on?</span>\r\n                    <br></br>\r\n                    <span className=\"introduction__propose\">So come with me...</span>\r\n                </header>\r\n                <ul className=\"introduction__list\">\r\n                    <li className=\"introduction__item\">\r\n                        <span className=\"introduction__step\">Step 1</span>\r\n                        <img className=\"introduction__image\" src={step_1} alt=\"introduction_image\" />\r\n                        <p className=\"introduction__description\">Firstly, choose one game level.</p>\r\n                    </li>\r\n                    <li className=\"introduction__item\">\r\n                        <span className=\"introduction__step\">Step 2</span>\r\n                        <img className=\"introduction__image\" src={step_2} alt=\"introduction_image\" />\r\n                        <p className=\"introduction__description\">Click start and try to remember whole road in correct order.</p>\r\n                    </li>\r\n                    <li className=\"introduction__item\">\r\n                        <span className=\"introduction__step\">Step 3</span>\r\n                        <img className=\"introduction__image\" src={step_3} alt=\"introduction_image\" />\r\n                        <p className=\"introduction__description\">Click in the consecutive parts of the road. Warning! If you miss or click in incorrect order, you lose one life.</p>\r\n                    </li>\r\n                    <li className=\"introduction__item\">\r\n                        <span className=\"introduction__step\">Step 4</span>\r\n                        <img className=\"introduction__image\" src={step_4} alt=\"introduction_image\" />\r\n                        <p className=\"introduction__description\">If everything goes well, you're gonna go to the next board with additional parts of the road. If you finish all ten boards on three different difficulty levels you'll become an expert and you don't need to eat nuts! Have fun!</p>\r\n                    </li>\r\n                </ul>\r\n                <button onClick={() => handleToggleIntro()} className=\"introduction__button\"><img className=\"introduction__button-icon\" src={close} alt=\"close-icon\"></img></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\n\r\nconst ButtonOfLevel = ({ handleClick, nameLevel, amountOfSquares, amountOfLives, time, counterTime }) => {\r\n    return (\r\n        <button\r\n            className=\"game__level-button game__button\"\r\n            onClick={() => handleClick(amountOfSquares, time, amountOfLives, counterTime)}\r\n        >\r\n            {nameLevel}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonOfLevel;","import React from 'react'\r\nimport ButtonOfLevel from \"../ButtonOfLevel/ButtonOfLevel\"\r\n\r\n\r\nexport default function StartLayer({ setDifficultyLevel, handleToggleIntro }) {\r\n    const Easy = \"Easy\"\r\n    const Normal = \"Normal\"\r\n    const Expert = \"Expert\"\r\n    return (\r\n        <div className=\"game__start-layer\">\r\n            <div>\r\n                <h1 className=\"game__title\">Road Game</h1>\r\n                <p className=\"game__subtitle\">Chose your path or die!</p>\r\n            </div>\r\n            <ul className=\"game__button-box\">\r\n                <ButtonOfLevel\r\n                    handleClick={setDifficultyLevel}\r\n                    nameLevel={Easy}\r\n                    amountOfSquares={3}\r\n                    time={800}\r\n                    amountOfLives={15}\r\n                    counterTime={6}\r\n                />\r\n                <ButtonOfLevel\r\n                    handleClick={setDifficultyLevel}\r\n                    nameLevel={Normal}\r\n                    amountOfSquares={6}\r\n                    time={600}\r\n                    amountOfLives={10}\r\n                    counterTime={4}\r\n                />\r\n                <ButtonOfLevel\r\n                    handleClick={setDifficultyLevel}\r\n                    nameLevel={Expert}\r\n                    amountOfSquares={9}\r\n                    time={300}\r\n                    amountOfLives={5}\r\n                    counterTime={2}\r\n                />\r\n            </ul>\r\n            <button\r\n                onClick={() => handleToggleIntro()}\r\n                className=\"game__intro-button game__button\">\r\n                Intro\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport Square from \"./Square/Square\";\r\nimport classNames from \"classnames\";\r\nimport { setDuration, getDirection, deleteLastArrayElement, setSquareDuration, isBusySquare, getRandom } from \"./lib/helpers\"\r\nimport Counter from \"./Counter/Counter\";\r\nimport Intro from \"./Intro/Intro\"\r\nimport StartLayer from \"./StartLayer/StartLayer\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      // flags\r\n      isChangeLevelButtonDisabled: false,\r\n      isStartButtonDisabled: true,\r\n      isStartLayerVisible: true,\r\n      isCounterVisible: false,\r\n      areSquaresLocked: true,\r\n      isIntroVisible: false,\r\n      isDeletingMiss: false,\r\n      isBusyArray: false,\r\n      isGameOver: false,\r\n      isWinGame: false,\r\n\r\n      // variables\r\n      buttonCaption: \"Start\",\r\n      topBoxInformation: \"\",\r\n      lastClickedIndex: 0,\r\n      amountOfSquares: 3,\r\n      amountOfLives: 15,\r\n      firstSquare: null,\r\n      counterTime: 5,\r\n      dimension: 10,\r\n      time: 100,\r\n      level: 1,\r\n      miss: 0,\r\n      \r\n\r\n      // arrays\r\n      clickedRoad: [],\r\n      partOfRoad: [],\r\n      missArray: [],\r\n      busyArray: [],\r\n      board: [],\r\n      road: [],\r\n\r\n    }\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.checkRoad = this.checkRoad.bind(this)\r\n  }\r\n  componentDidMount() {\r\n    this.ifUserWasOnSite()\r\n    this.setState({\r\n      board: this.createBoard(),\r\n    });\r\n  }\r\n  ifUserWasOnSite() {\r\n    if (localStorage.getItem(\"RoadGameToken\")) {\r\n      return\r\n    } else {\r\n      localStorage.setItem(\"RoadGameToken\", \"RoadGameToken\")\r\n      this.setState({\r\n        isIntroVisible: !this.state.isIntroVisible\r\n      })\r\n    }\r\n  }\r\n  createBoard() {\r\n    let list = [];\r\n    for (let row = 0; row < this.state.dimension; row++) {\r\n      list[row] = [];\r\n      for (let col = 0; col < this.state.dimension; col++) {\r\n        list[row][col] = `${row}${col}`;\r\n      }\r\n    }\r\n    return list;\r\n  }\r\n  drawFirstSquare = async () => {\r\n    let randomFiled = getRandom(this.state.board);\r\n    await this.setState({ firstSquare: randomFiled });\r\n    await this.setRoad(this.state.firstSquare);\r\n  }\r\n  setRoad = firstSquare => {\r\n    const roadArray = [];\r\n    this.setState({\r\n      isBusyArray: false\r\n    })\r\n    for (let i = 0; i < this.state.amountOfSquares; i++) {\r\n      if (this.state.isBusyArray) { break }\r\n      else { this.setSingleSquare(roadArray, firstSquare, i); }\r\n    }\r\n    if (!this.state.isBusyArray) {\r\n      this.setState({ road: roadArray });\r\n    }\r\n  }\r\n  setBusyState(direction) {\r\n    if (!this.state.busyArray.includes(direction)) {\r\n      this.setState({\r\n        busyArray: [...this.state.busyArray, direction]\r\n      })\r\n    }\r\n  }\r\n  setSingleSquare(roadArray, firstSquare, i) {\r\n    if (this.state.busyArray.length > 3) {\r\n      this.setState({\r\n        road: [],\r\n        busyArray: [],\r\n        isBusyArray: true\r\n      })\r\n      return this.drawFirstSquare();\r\n    }\r\n\r\n    const { board } = this.state;\r\n    const direction = getDirection();\r\n\r\n    let row;\r\n    let col;\r\n\r\n    if (i < 1) {\r\n      row = +firstSquare.substr(0, 1);\r\n      col = +firstSquare.substr(1, 1);\r\n    } else {\r\n      row = +roadArray[roadArray.length - 1].substr(0, 1);\r\n      col = +roadArray[roadArray.length - 1].substr(1, 1);\r\n    }\r\n    // up\r\n    if (direction === 0) {\r\n      if (row - 1 >= 0 && !isBusySquare(this.state.firstSquare, roadArray, row - 1, col)) {\r\n        firstSquare = board[row - 1][col];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i);\r\n      }\r\n    }\r\n\r\n    // right\r\n    else if (direction === 1) {\r\n      if (col + 1 <= 9 && !isBusySquare(this.state.firstSquare, roadArray, row, col + 1)) {\r\n        firstSquare = board[row][col + 1];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i)\r\n      }\r\n    }\r\n\r\n    // down\r\n    else if (direction === 2) {\r\n      if (row + 1 <= 9 && !isBusySquare(this.state.firstSquare, roadArray, row + 1, col)) {\r\n        firstSquare = board[row + 1][col];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i)\r\n      }\r\n    }\r\n\r\n    // left\r\n    else if (direction === 3) {\r\n      if (col - 1 >= 0 && !isBusySquare(this.state.firstSquare, roadArray, row, col - 1)) {\r\n        firstSquare = board[row][col - 1];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i)\r\n      }\r\n    }\r\n  }\r\n  unlockSquares() {\r\n    const { amountOfSquares, time, counterTime } = this.state;\r\n    setTimeout(() => {\r\n      this.setState({\r\n        areSquaresLocked: false\r\n      })\r\n    }, setDuration({ amountOfSquares, time }, counterTime * 1000))\r\n  }\r\n  handleStart = async () => {\r\n    await this.setState({\r\n      isStartButtonDisabled: true,\r\n      isWin: false,\r\n      isChangeLevelButtonDisabled: true\r\n    })\r\n    await this.drawFirstSquare();\r\n    await this.setCounter();\r\n    await this.unlockSquares();\r\n    await this.updateRoad();\r\n    await this.hideRoad();\r\n  }\r\n  updateRoad() {\r\n    const { road, board, time } = this.state;\r\n    const tempArray = [];\r\n    board.map((row) => {\r\n      row.map((col) => {\r\n        if (col === road.filter(roadSquare => roadSquare === col ? col : null)[0]) {\r\n          const duration = setSquareDuration(road, col, time);\r\n          this.setTimeBetweenDraw(tempArray, col, duration);\r\n        }\r\n      })\r\n    })\r\n  }\r\n  setTimeBetweenDraw = (tempArray, col, duration) => {\r\n    setTimeout(() => {\r\n      tempArray.push(col)\r\n      this.setState({\r\n        partOfRoad: tempArray\r\n      })\r\n    }, duration);\r\n  }\r\n  hideRoad() {\r\n    const { amountOfSquares, time, counterTime } = this.state;\r\n    setTimeout(() => {\r\n      this.setState({\r\n        partOfRoad: [],\r\n        isCounterVisible: false\r\n      })\r\n    }, setDuration({ amountOfSquares, time }, counterTime * 1000 + 500))\r\n  }\r\n  gameOver() {\r\n    this.setState({\r\n      areSquaresLocked: true, // block squares\r\n      isChangeLevelButtonDisabled: true, // lock changeLevel button\r\n      isGameOver: true\r\n    })\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isStartLayerVisible: true,\r\n        isChangeLevelButtonDisabled: false, // unlock changeLevel button\r\n        areSquaresLocked: true,\r\n        isGameOver: false,\r\n        buttonCaption: \"Start\",\r\n        topBoxInformation: \"\",\r\n        level: 1,\r\n        amountOfLives: 15,\r\n        miss: 0\r\n      })\r\n      this.cleanStateOfGame()\r\n    }, 4000);\r\n  }\r\n  winRound() {\r\n    setTimeout(() => {\r\n      this.setState(prevState => ({\r\n        level: prevState.level + 1,\r\n        amountOfSquares: prevState.amountOfSquares + 2,\r\n        // buttonCaption: \"Next level\",\r\n        topBoxInformation: \"\",\r\n      }), () => {\r\n        if (this.state.level === 10) {\r\n          this.winGame();\r\n        }\r\n      })\r\n\r\n      if (this.state.level !== 10) {\r\n        this.setState({\r\n          areSquaresLocked: true,\r\n          buttonCaption: \"Next level\"\r\n        })\r\n        this.cleanStateOfGame()\r\n      } else {\r\n        this.setState({\r\n          areSquaresLocked: true,\r\n          buttonCaption: \"Start\"\r\n        })\r\n      }\r\n\r\n    }, 1000);\r\n  }\r\n  winGame() {\r\n    this.setState({\r\n      isWinGame: true,\r\n      isStartButtonDisabled: true,\r\n      isChangeLevelButtonDisabled: true\r\n    })\r\n    setTimeout(() => {\r\n      this.setState({\r\n        areSquaresLocked: true,\r\n        isWinGame: false,\r\n        buttonCaption: \"Start\",\r\n        topBoxInformation: \"\",\r\n        level: 1,\r\n        amountOfLives: 15,\r\n        miss: 0,\r\n        isStartLayerVisible: true,\r\n        isChangeLevelButtonDisabled: false\r\n      })\r\n      this.cleanStateOfGame()\r\n    }, 4000);\r\n  }\r\n  cleanStateOfGame() {\r\n    this.setState({\r\n      missArray: [],\r\n      road: [],\r\n      clickedRoad: [],\r\n      partOfRoad: [],\r\n      firstSquare: null,\r\n      areSquaresLocked: true, // lock squares\r\n      isStartButtonDisabled: false, // unlock start button\r\n      lastClickedIndex: 0,\r\n    })\r\n  }\r\n  deleteInformation() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        topBoxInformation: \"\",\r\n        areSquaresLocked: false\r\n      })\r\n    }, 300);\r\n  }\r\n  deleteMiss(array) {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        missArray: deleteLastArrayElement(array),\r\n        isDeletingMiss: false\r\n      })\r\n    }, 300);\r\n  }\r\n  checkRoad = (currentSquare, index, e) => {\r\n    e.preventDefault()\r\n    const { clickedRoad, missArray, road, areSquaresLocked, firstSquare, lastClickedIndex, isDeletingMiss } = this.state;\r\n    const currentIndex = index.filter(el => typeof el == \"number\" ? el + 1 : null)[0];\r\n\r\n    // prevent clicking in clickedSquare, missSquare, firstSquare and if isDeletingMiss == true\r\n    if (areSquaresLocked ||\r\n      clickedRoad.includes(currentSquare) ||\r\n      missArray.includes(currentSquare) ||\r\n      currentSquare === firstSquare ||\r\n      isDeletingMiss)\r\n      return;\r\n\r\n    // if hit agrees with lastClicked\r\n    if (currentIndex === lastClickedIndex) {\r\n      this.setState(prevState => ({\r\n        lastClickedIndex: prevState.lastClickedIndex + 1,\r\n        clickedRoad: [...prevState.clickedRoad, currentSquare],\r\n        topBoxInformation: \"Nice shot!\",\r\n        areSquaresLocked: true\r\n      }), () => {\r\n        if (this.state.lastClickedIndex === road.length) {\r\n          this.winRound();\r\n        } else {\r\n          this.deleteInformation()\r\n        }\r\n      })\r\n    }\r\n\r\n    // if hit includes in roadArray but doesn't agree with lastClicked\r\n    else if (road.includes(currentSquare) && currentIndex !== lastClickedIndex) {\r\n      this.setState(prevState => ({\r\n        miss: prevState.miss + 1,\r\n        missArray: [...missArray, currentSquare],\r\n        topBoxInformation: \"Wrong order!\",\r\n        isDeletingMiss: true,\r\n        areSquaresLocked: true\r\n      }), () => {\r\n        if (this.state.miss >= this.state.amountOfLives) {\r\n          this.gameOver();\r\n        } else {\r\n          this.deleteMiss(missArray)\r\n          this.deleteInformation()\r\n        }\r\n      })\r\n    }\r\n\r\n    else {\r\n      this.setState(prevState => ({\r\n        miss: prevState.miss + 1,\r\n        missArray: [...missArray, currentSquare],\r\n        topBoxInformation: \"Miss!\",\r\n        areSquaresLocked: true\r\n      }), () => {\r\n        if (this.state.miss >= this.state.amountOfLives) {\r\n          this.gameOver();\r\n        } else {\r\n          this.deleteInformation()\r\n        }\r\n      })\r\n    }\r\n  }\r\n  setCounter() {\r\n    const { amountOfSquares, time } = this.state\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isCounterVisible: true,\r\n        isChangeLevelButtonDisabled: false\r\n      })\r\n    }, setDuration({ amountOfSquares, time }, 0))\r\n  }\r\n  setDifficultyLevel = (amountOfSquares, time, amountOfLives, counterTime) => {\r\n    this.setState({\r\n      amountOfSquares: amountOfSquares,\r\n      amountOfLives: amountOfLives,\r\n      time: time,\r\n      counterTime: counterTime,\r\n      isStartLayerVisible: false,\r\n      isStartButtonDisabled: false,\r\n      isCounterVisible: false,\r\n    })\r\n    this.cleanStateOfGame();\r\n  }\r\n  handleChangeLevel = () => {\r\n    this.setState({\r\n      isStartLayerVisible: true,\r\n      level: 1,\r\n      amountOfLives: 15,\r\n      miss: 0,\r\n      buttonCaption: \"Start\"\r\n    })\r\n    this.cleanStateOfGame();\r\n  }\r\n  handleToggleIntro = () => {\r\n    this.setState({\r\n      isIntroVisible: !this.state.isIntroVisible\r\n    })\r\n  }\r\n  renderBoard() {\r\n    const {\r\n      firstSquare,\r\n      board,\r\n      partOfRoad,\r\n      clickedRoad,\r\n      missArray,\r\n      road\r\n    } = this.state\r\n\r\n    return board.map((row, i) => {\r\n      return row.map((col, j) => {\r\n        return (\r\n          <Square\r\n            firstSquare={firstSquare === col ? firstSquare : null}\r\n            partOfRoad={partOfRoad}\r\n            clickedRoad={clickedRoad}\r\n            missArray={missArray}\r\n            key={`${i}${j}`}\r\n            row={i}\r\n            col={j}\r\n            handleClick={this.checkRoad}\r\n            index={road.map((square, index) => (square === col ? index : null))}\r\n          ></Square >\r\n        );\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const {\r\n      isStartButtonDisabled,\r\n      buttonCaption,\r\n      miss,\r\n      level,\r\n      isCounterVisible,\r\n      topBoxInformation,\r\n      isGameOver,\r\n      isWinGame,\r\n      amountOfLives,\r\n      isStartLayerVisible,\r\n      isChangeLevelButtonDisabled,\r\n      isIntroVisible,\r\n      counterTime\r\n    } = this.state;\r\n\r\n    const informationClass = classNames({\r\n      \"game__information game__information--correct\": this.state.topBoxInformation === \"Nice shot!\",\r\n      \"game__information game__information--wrong\": this.state.topBoxInformation === \"Wrong order!\",\r\n      \"game__information game__information--miss\": this.state.topBoxInformation === \"Miss!\",\r\n      \"game__information game__information--none\": this.state.topBoxInformation === \"\",\r\n    })\r\n    return (\r\n      <>\r\n        {isIntroVisible && <Intro handleToggleIntro={this.handleToggleIntro} />}\r\n        <div className=\"game\">\r\n          {isStartLayerVisible ?\r\n            (\r\n              <StartLayer\r\n                setDifficultyLevel={this.setDifficultyLevel}\r\n                handleToggleIntro={this.handleToggleIntro}\r\n              />\r\n            ) : (\r\n              <div className=\"game__board-layer\">\r\n                <div className=\"game__board-wrapper\">\r\n                  <div className=\"game__top-box\">\r\n                    <span className=\"game__parameter\">Board {level}</span>\r\n                    {isCounterVisible ? <Counter counterTime={counterTime} /> : false}\r\n                    <span className={informationClass}> {topBoxInformation}</span>\r\n                    <span className=\"game__parameter\">\r\n                        <FontAwesomeIcon icon={faHeart} className=\"heartIcon\"/>\r\n                       {amountOfLives - miss} \r\n                    </span>\r\n                  </div>\r\n                  <div className=\"game__board\">\r\n                    <span className={isGameOver ? \"board__gameOver-caption\" : \"board__gameOver-caption--none\"}></span>\r\n                    <span className={isWinGame ? \"board__winGame-caption\" : \"board__winGame-caption--none\"}></span>\r\n                    {this.renderBoard()}\r\n                  </div>\r\n                </div >\r\n                <div className=\"game__button-box game__button-box--board\">\r\n                  <button\r\n                    className={isStartButtonDisabled ? \"game__button game__button--disabled\" : \"game__button\"}\r\n                    disabled={isStartButtonDisabled}\r\n                    onClick={this.handleStart}>\r\n                    {buttonCaption}\r\n                  </button>\r\n                  <button\r\n                    className={isChangeLevelButtonDisabled ? \"game__button game__button--disabled\" : \"game__button\"}\r\n                    onClick={this.handleChangeLevel}\r\n                    disabled={isChangeLevelButtonDisabled}\r\n                  >\r\n                    Change level\r\n            </button>\r\n                </div>\r\n              </div >\r\n            )\r\n          }\r\n        </div >\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './Components/Game'\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}