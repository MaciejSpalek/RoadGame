{"version":3,"sources":["Components/Square.js","Components/lib/helpers.js","Components/Counter/Counter.js","Components/ButtonOfLevel/ButtonOfLevel.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","firstSquare","row","col","partOfRoad","handleClick","clickedRoad","missArray","index","squareValue","squareClass","classNames","length","includes","filter","el","className","onClick","e","setDuration","myTime","amountOfSquares","time","deleteLastArrayElement","array","slice","isBusySquare","roadArray","i","Counter","counterTime","console","log","useState","counter","setCounter","useEffect","timer","setInterval","clearInterval","ButtonOfLevel","nameLevel","amountOfLives","Game","props","drawFirstSquare","a","board","state","randomFiled","Math","round","random","setState","setRoad","isBusyArray","setSingleSquare","road","handleStart","isStartButtonDisabled","isWin","isChangeLevelButtonDisabled","unlockSquares","updateRoad","hideRoad","setTimeBetweenDraw","tempArray","duration","setTimeout","push","checkRoad","currentSquare","preventDefault","areSquaresLocked","lastClickedIndex","isDeletingMiss","currentIndex","prevState","topBoxInformation","winRound","deleteInformation","miss","gameOver","deleteMiss","setDifficultyLevel","isStartLayerVisible","isCounterVisible","cleanStateOfGame","handleChangeLevel","level","buttonCaption","isGameOver","isWinGame","dimension","busyArray","bind","this","createBoard","list","direction","substr","setBusyState","map","roadSquare","square","setSquareDuration","winGame","j","key","informationClass","renderBoard","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a89d863.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Square = ({ firstSquare, row, col, partOfRoad, handleClick, clickedRoad, missArray, index }) => {\r\n  const squareValue = `${row}${col}`; \r\n  const squareClass = classNames({\r\n    'square': true,\r\n    'startSquare': firstSquare === squareValue || partOfRoad[partOfRoad.length-1] === squareValue,\r\n    'drawRoad': partOfRoad.includes(squareValue) && partOfRoad[partOfRoad.length-1] !== squareValue,\r\n    'hitSquare': clickedRoad.filter(el => el === squareValue)[0],\r\n    'missSquare': missArray.filter(el => el === squareValue)[0]\r\n  })\r\n  return (\r\n    <div className={squareClass} onClick={(e) => handleClick(squareValue, index, e)}></div >\r\n  );\r\n}\r\n\r\nexport default Square;","\r\nconst setDuration = ({ amountOfSquares, time }, myTime) => {\r\n    return (amountOfSquares * time) + myTime;\r\n}\r\n\r\nconst getDirection = () => {\r\n    return Math.round(Math.random() * 3);\r\n}\r\n\r\nconst deleteLastArrayElement = (array) => {\r\n    return array.slice(0, array.length);\r\n}\r\n\r\nconst setSquareDuration = (road, col, time) => {\r\n    const durationArray = road.map((square, index) => (square === col ? (index + 1) * time : null));\r\n    const durationElement = durationArray.filter(square => typeof square === \"number\")[0];\r\n    return durationElement;\r\n}\r\n\r\nconst isBusySquare = (firstSquare, roadArray, row, col) => {\r\n    for (let i = 0; i < roadArray.length; i++) {\r\n        if (roadArray[i] === `${row}${col}` || firstSquare === `${row}${col}`) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nconst getRandom = (board) => {\r\n    return board[Math.round(Math.random() * 9)][\r\n        Math.round(Math.random() * 9)\r\n    ];\r\n}\r\n\r\nexport { setDuration, getDirection, deleteLastArrayElement, setSquareDuration, isBusySquare, getRandom };","import React, { useState, useEffect } from \"react\"\r\n\r\nconst Counter = ({ counterTime }) => {\r\n    console.log(counterTime);\r\n\r\n    const [counter, setCounter] = useState(counterTime)\r\n    useEffect(() => {\r\n        const timer =\r\n            counter > 0 && setInterval(() => setCounter(counter - 1), 1000)\r\n        return () => clearInterval(timer)\r\n    }, [counter])\r\n    return (\r\n        <span className=\"game__parameter game__parameter--counter\" >{counter}s</span>\r\n    )\r\n}\r\n\r\nexport default Counter;","import React from \"react\"\r\n\r\nconst ButtonOfLevel = ({ handleClick, nameLevel, amountOfSquares, amountOfLives, time, counterTime }) => {\r\n    return (\r\n        <button\r\n            className=\"game__level-button game__button\"\r\n            onClick={() => handleClick(amountOfSquares, time, amountOfLives, counterTime)}\r\n        >\r\n            {nameLevel}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonOfLevel;","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport classNames from \"classnames\";\r\nimport { setDuration, getDirection, deleteLastArrayElement, setSquareDuration, isBusySquare, getRandom } from \"./lib/helpers\"\r\nimport Counter from \"./Counter/Counter\";\r\nimport ButtonOfLevel from \"./ButtonOfLevel/ButtonOfLevel\"\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      // flags\r\n      isChangeLevelButtonDisabled: false,\r\n      isStartLayerVisible: true,\r\n      isCounterVisible: false,\r\n      areSquaresLocked: true,\r\n      isStartButtonDisabled: true,\r\n      isDeletingMiss: false,\r\n      isBusyArray: false,\r\n      isGameOver: false,\r\n      isWinGame: false,\r\n\r\n      // variables\r\n      buttonCaption: \"Start\",\r\n      topBoxInformation: \"\",\r\n      lastClickedIndex: 0,\r\n      amountOfSquares: 3,\r\n      amountOfLives: 15,\r\n      firstSquare: null,\r\n      dimension: 10,\r\n      time: 500,\r\n      level: 1,\r\n      miss: 0,\r\n      counterTime: 5,\r\n\r\n      // arrays\r\n      clickedRoad: [],\r\n      partOfRoad: [],\r\n      missArray: [],\r\n      busyArray: [],\r\n      board: [],\r\n      road: [],\r\n\r\n    }\r\n    this.handleStart = this.handleStart.bind(this);\r\n    this.checkRoad = this.checkRoad.bind(this)\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      board: this.createBoard(),\r\n    });\r\n  }\r\n  createBoard() {\r\n    let list = [];\r\n    for (let row = 0; row < this.state.dimension; row++) {\r\n      list[row] = [];\r\n      for (let col = 0; col < this.state.dimension; col++) {\r\n        list[row][col] = `${row}${col}`;\r\n      }\r\n    }\r\n    return list;\r\n  }\r\n  drawFirstSquare = async () => {\r\n    let randomFiled = getRandom(this.state.board);\r\n    await this.setState({ firstSquare: randomFiled });\r\n    await this.setRoad(this.state.firstSquare);\r\n  }\r\n  setRoad = firstSquare => {\r\n    const roadArray = [];\r\n    this.setState({\r\n      isBusyArray: false\r\n    })\r\n    for (let i = 0; i < this.state.amountOfSquares; i++) {\r\n      if (this.state.isBusyArray) { break }\r\n      else { this.setSingleSquare(roadArray, firstSquare, i); }\r\n    }\r\n    if (!this.state.isBusyArray) {\r\n      this.setState({ road: roadArray });\r\n    }\r\n  }\r\n  setBusyState(direction) {\r\n    if (!this.state.busyArray.includes(direction)) {\r\n      this.setState({\r\n        busyArray: [...this.state.busyArray, direction]\r\n      })\r\n    }\r\n  }\r\n  setSingleSquare(roadArray, firstSquare, i) {\r\n    if (this.state.busyArray.length > 3) {\r\n      this.setState({\r\n        road: [],\r\n        busyArray: [],\r\n        isBusyArray: true\r\n      })\r\n      return this.drawFirstSquare();\r\n    }\r\n\r\n    const { board } = this.state;\r\n    const direction = getDirection();\r\n\r\n    let row;\r\n    let col;\r\n\r\n    if (i < 1) {\r\n      row = +firstSquare.substr(0, 1);\r\n      col = +firstSquare.substr(1, 1);\r\n    } else {\r\n      row = +roadArray[roadArray.length - 1].substr(0, 1);\r\n      col = +roadArray[roadArray.length - 1].substr(1, 1);\r\n    }\r\n    // up\r\n    if (direction === 0) {\r\n      if (row - 1 >= 0 && !isBusySquare(this.state.firstSquare, roadArray, row - 1, col)) {\r\n        firstSquare = board[row - 1][col];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i);\r\n      }\r\n    }\r\n\r\n    // right\r\n    else if (direction === 1) {\r\n      if (col + 1 <= 9 && !isBusySquare(this.state.firstSquare, roadArray, row, col + 1)) {\r\n        firstSquare = board[row][col + 1];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i)\r\n      }\r\n    }\r\n\r\n    // down\r\n    else if (direction === 2) {\r\n      if (row + 1 <= 9 && !isBusySquare(this.state.firstSquare, roadArray, row + 1, col)) {\r\n        firstSquare = board[row + 1][col];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i)\r\n      }\r\n    }\r\n\r\n    // left\r\n    else if (direction === 3) {\r\n      if (col - 1 >= 0 && !isBusySquare(this.state.firstSquare, roadArray, row, col - 1)) {\r\n        firstSquare = board[row][col - 1];\r\n        roadArray.push(firstSquare);\r\n        this.setState({\r\n          busyArray: []\r\n        })\r\n      } else {\r\n        this.setBusyState(direction)\r\n        return this.setSingleSquare(roadArray, firstSquare, i)\r\n      }\r\n    }\r\n  }\r\n  unlockSquares() {\r\n    const { amountOfSquares, time, counterTime } = this.state;\r\n    setTimeout(() => {\r\n      this.setState({\r\n        areSquaresLocked: false\r\n      })\r\n    }, setDuration({ amountOfSquares, time }, counterTime * 1000))\r\n  }\r\n  handleStart = async () => {\r\n    await this.setState({\r\n      isStartButtonDisabled: true,\r\n      isWin: false,\r\n      isChangeLevelButtonDisabled: true\r\n    })\r\n    await this.drawFirstSquare();\r\n    await this.setCounter();\r\n    await this.unlockSquares();\r\n    await this.updateRoad();\r\n    await this.hideRoad();\r\n  }\r\n  updateRoad() {\r\n    const { road, board, time } = this.state;\r\n    const tempArray = [];\r\n    board.map((row) => {\r\n      row.map((col) => {\r\n        if (col === road.filter(roadSquare => roadSquare === col ? col : null)[0]) {\r\n          const duration = setSquareDuration(road, col, time);\r\n          this.setTimeBetweenDraw(tempArray, col, duration);\r\n        }\r\n      })\r\n    })\r\n  }\r\n  setTimeBetweenDraw = (tempArray, col, duration) => {\r\n    setTimeout(() => {\r\n      tempArray.push(col)\r\n      this.setState({\r\n        partOfRoad: tempArray\r\n      })\r\n    }, duration);\r\n  }\r\n  hideRoad() {\r\n    const { amountOfSquares, time, counterTime } = this.state;\r\n    setTimeout(() => {\r\n      this.setState({\r\n        partOfRoad: [],\r\n        isCounterVisible: false\r\n      })\r\n    }, setDuration({ amountOfSquares, time }, counterTime * 1000 + 500))\r\n  }\r\n  gameOver() {\r\n    this.setState({\r\n      areSquaresLocked: true, // block squares\r\n      isChangeLevelButtonDisabled: true, // lock changeLevel button\r\n      isGameOver: true\r\n    })\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isStartLayerVisible: true,\r\n        isChangeLevelButtonDisabled: false, // unlock changeLevel button\r\n        areSquaresLocked: true,\r\n        isGameOver: false,\r\n        buttonCaption: \"Start\",\r\n        topBoxInformation: \"\",\r\n        level: 1,\r\n        amountOfLives: 15,\r\n        miss: 0\r\n      })\r\n      this.cleanStateOfGame()\r\n    }, 4000);\r\n  }\r\n  winRound() {\r\n    setTimeout(() => {\r\n      this.setState(prevState => ({\r\n        level: prevState.level + 1,\r\n        amountOfSquares: prevState.amountOfSquares + 2,\r\n        // buttonCaption: \"Next level\",\r\n        topBoxInformation: \"\",\r\n      }), () => {\r\n        if (this.state.level == 10) {\r\n          this.winGame();\r\n        }\r\n      })\r\n\r\n      if (this.state.level != 10) {\r\n        this.setState({\r\n          areSquaresLocked: true,\r\n          buttonCaption: \"Next level\"\r\n        })\r\n        this.cleanStateOfGame()\r\n      } else {\r\n        this.setState({\r\n          areSquaresLocked: true,\r\n          buttonCaption: \"Start\"\r\n        })\r\n      }\r\n\r\n    }, 1000);\r\n  }\r\n  winGame() {\r\n    this.setState({\r\n      isWinGame: true,\r\n      isStartButtonDisabled: true,\r\n      isChangeLevelButtonDisabled: true\r\n    })\r\n    setTimeout(() => {\r\n      this.setState({\r\n        areSquaresLocked: true,\r\n        isWinGame: false,\r\n        buttonCaption: \"Start\",\r\n        topBoxInformation: \"\",\r\n        level: 1,\r\n        amountOfLives: 15,\r\n        miss: 0,\r\n        isStartLayerVisible: true,\r\n        isChangeLevelButtonDisabled: false\r\n      })\r\n      this.cleanStateOfGame()\r\n    }, 4000);\r\n  }\r\n  cleanStateOfGame() {\r\n    this.setState({\r\n      missArray: [],\r\n      road: [],\r\n      clickedRoad: [],\r\n      partOfRoad: [],\r\n      firstSquare: null,\r\n      areSquaresLocked: true, // lock squares\r\n      isStartButtonDisabled: false, // unlock start button\r\n      lastClickedIndex: 0,\r\n    })\r\n  }\r\n  deleteInformation() {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        topBoxInformation: \"\",\r\n        areSquaresLocked: false\r\n      })\r\n    }, 500);\r\n  }\r\n  deleteMiss(array) {\r\n    setTimeout(() => {\r\n      this.setState({\r\n        missArray: deleteLastArrayElement(array),\r\n        isDeletingMiss: false\r\n      })\r\n    }, 500);\r\n  }\r\n  checkRoad = (currentSquare, index, e) => {\r\n    e.preventDefault()\r\n    const { clickedRoad, missArray, road, areSquaresLocked, firstSquare, lastClickedIndex, isDeletingMiss } = this.state;\r\n    const currentIndex = index.filter(el => typeof el == \"number\" ? el + 1 : null)[0];\r\n\r\n    // prevent clicking in clickedSquare, missSquare, firstSquare and if isDeletingMiss == true\r\n    if (areSquaresLocked ||\r\n      clickedRoad.includes(currentSquare) ||\r\n      missArray.includes(currentSquare) ||\r\n      currentSquare === firstSquare ||\r\n      isDeletingMiss)\r\n      return;\r\n\r\n    // if hit agrees with lastClicked\r\n    if (currentIndex == lastClickedIndex) {\r\n      this.setState(prevState => ({\r\n        lastClickedIndex: prevState.lastClickedIndex + 1,\r\n        clickedRoad: [...prevState.clickedRoad, currentSquare],\r\n        topBoxInformation: \"Nice shot!\",\r\n        areSquaresLocked: true\r\n      }), () => {\r\n        if (this.state.lastClickedIndex === road.length) {\r\n          this.winRound();\r\n        } else {\r\n          this.deleteInformation()\r\n        }\r\n      })\r\n    }\r\n\r\n    // if hit includes in roadArray but doesn't agree with lastClicked\r\n    else if (road.includes(currentSquare) && currentIndex != lastClickedIndex) {\r\n      this.setState(prevState => ({\r\n        miss: prevState.miss + 1,\r\n        missArray: [...missArray, currentSquare],\r\n        topBoxInformation: \"Wrong order!\",\r\n        isDeletingMiss: true,\r\n        areSquaresLocked: true\r\n      }), () => {\r\n        if (this.state.miss >= this.state.amountOfLives) {\r\n          this.gameOver();\r\n        } else {\r\n          this.deleteMiss(missArray)\r\n          this.deleteInformation()\r\n        }\r\n      })\r\n    }\r\n\r\n    else {\r\n      this.setState(prevState => ({\r\n        miss: prevState.miss + 1,\r\n        missArray: [...missArray, currentSquare],\r\n        topBoxInformation: \"Miss!\",\r\n        areSquaresLocked: true\r\n      }), () => {\r\n        if (this.state.miss >= this.state.amountOfLives) {\r\n          this.gameOver();\r\n        } else {\r\n          this.deleteInformation()\r\n        }\r\n      })\r\n    }\r\n  }\r\n  setCounter() {\r\n    const { amountOfSquares, time } = this.state\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isCounterVisible: true,\r\n        isChangeLevelButtonDisabled: false\r\n      })\r\n    }, setDuration({ amountOfSquares, time }, 0))\r\n  }\r\n  setDifficultyLevel = (amountOfSquares, time, amountOfLives, counterTime) => {\r\n    this.setState({\r\n      amountOfSquares: amountOfSquares,\r\n      amountOfLives: amountOfLives,\r\n      time: time,\r\n      counterTime: counterTime,\r\n      isStartLayerVisible: false,\r\n      isStartButtonDisabled: false,\r\n      isCounterVisible: false,\r\n    })\r\n    this.cleanStateOfGame();\r\n  }\r\n  handleChangeLevel = () => {\r\n    this.setState({\r\n      isStartLayerVisible: true,\r\n      level: 1,\r\n      amountOfLives: 15,\r\n      miss: 0,\r\n      buttonCaption: \"Start\"\r\n    })\r\n    this.cleanStateOfGame();\r\n  }\r\n  renderBoard() {\r\n    const {\r\n      firstSquare,\r\n      board,\r\n      partOfRoad,\r\n      clickedRoad,\r\n      missArray,\r\n      road\r\n    } = this.state\r\n\r\n    return board.map((row, i) => {\r\n      return row.map((col, j) => {\r\n        return (\r\n          <Square\r\n            firstSquare={firstSquare === col ? firstSquare : null}\r\n            partOfRoad={partOfRoad}\r\n            clickedRoad={clickedRoad}\r\n            missArray={missArray}\r\n            key={`${i}${j}`}\r\n            row={i}\r\n            col={j}\r\n            handleClick={this.checkRoad}\r\n            index={road.map((square, index) => (square === col ? index : null))}\r\n          ></Square >\r\n        );\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    const {\r\n      isStartButtonDisabled,\r\n      buttonCaption,\r\n      miss,\r\n      level,\r\n      isCounterVisible,\r\n      topBoxInformation,\r\n      isGameOver,\r\n      isWinGame,\r\n      amountOfLives,\r\n      isStartLayerVisible,\r\n      isChangeLevelButtonDisabled,\r\n      counterTime\r\n    } = this.state;\r\n\r\n    const informationClass = classNames({\r\n      \"game__information game__information--correct\": this.state.topBoxInformation == \"Nice shot!\",\r\n      \"game__information game__information--wrong\": this.state.topBoxInformation == \"Wrong order!\",\r\n      \"game__information game__information--miss\": this.state.topBoxInformation == \"Miss!\",\r\n      \"game__information game__information--none\": this.state.topBoxInformation == \"\",\r\n    })\r\n\r\n    const Easy = \"Easy\"\r\n    const Normal = \"Normal\"\r\n    const Expert = \"Expert\"\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        {isStartLayerVisible ? (\r\n          <div className=\"game__start-layer\">\r\n            <div>\r\n              <h1 className=\"game__title\">Road Game</h1>\r\n              <p className=\"game__subtitle\">Chose your path or die!</p>\r\n            </div>\r\n            <div className=\"game__button-box\">\r\n              <ButtonOfLevel\r\n                handleClick={this.setDifficultyLevel}\r\n                nameLevel={Easy}\r\n                amountOfSquares={3}\r\n                time={1500}\r\n                amountOfLives={15}\r\n                counterTime={6}\r\n              />\r\n              <ButtonOfLevel\r\n                handleClick={this.setDifficultyLevel}\r\n                nameLevel={Normal}\r\n                amountOfSquares={6}\r\n                time={1000}\r\n                amountOfLives={10}\r\n                counterTime={4}\r\n              />\r\n              <ButtonOfLevel\r\n                handleClick={this.setDifficultyLevel}\r\n                nameLevel={Expert}\r\n                amountOfSquares={9}\r\n                time={500}\r\n                amountOfLives={5}\r\n                counterTime={2}\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n            <div className=\"game__board-layer\">\r\n              <div className=\"game__board-wrapper\">\r\n                <div className=\"game__top-box\">\r\n                  <span className=\"game__parameter\">Board {level}</span>\r\n                  {isCounterVisible ? <Counter counterTime={counterTime} /> : false}\r\n                  <span className={informationClass}> {topBoxInformation}</span>\r\n                  <span className=\"game__parameter\">&#10084; {amountOfLives - miss} </span>\r\n                </div>\r\n                <div className=\"game__board\">\r\n                  <span className={isGameOver ? \"board__gameOver-caption\" : \"board__gameOver-caption--none\"}></span>\r\n                  <span className={isWinGame ? \"board__winGame-caption\" : \"board__winGame-caption--none\"}></span>\r\n                  {this.renderBoard()}\r\n                </div>\r\n              </div>\r\n              <div className=\"game__button-box game__button-box--board\">\r\n                <button\r\n                  className={isStartButtonDisabled ? \"game__button game__button--disabled\" : \"game__button\"}\r\n                  disabled={isStartButtonDisabled}\r\n                  onClick={this.handleStart}>\r\n                  {buttonCaption}\r\n                </button>\r\n                <button\r\n                  className={isChangeLevelButtonDisabled ? \"game__button game__button--disabled\" : \"game__button\"}\r\n                  onClick={this.handleChangeLevel}\r\n                  disabled={isChangeLevelButtonDisabled}\r\n                >\r\n                  Change level\r\n            </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './Components/Game'\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}